"""
	$(SIGNATURES)

Collect all `ParamVector`s in an object.
"""
function collect_pvectors(o :: ModelObject)
    pvecV = Vector{ParamVector}();
    objV = collect_model_objects(o);
    if !isempty(objV)
        for i1 = 1 : length(objV)
            push!(pvecV, get_pvector(objV[i1]));
        end
    end
    return pvecV :: Vector{ParamVector}
end


"""
	$(SIGNATURES)

Make a `Vector{ParamVector}` into a `Dict{String, Dict{Symbol, Any}}`.
Each entry is one `ParamVector`. 
They key is the `ObjectId` of each `ParamVector` made into a `String`. Such as "parent > child > grandchild[2, 1]".
The value is the `ParamVector` made into a Dict.

This is a format that can be saved without using user defined types. There is hope this can be serialized.
"""
function make_dict(pvv :: Vector{ParamVector}; isCalibrated :: Bool = true)
    n = length(pvv);
    if n < 1
        return nothing
    end

    d = nothing;
    for j = 1 : n
        pv = pvv[j];
        key = make_string(get_object_id(pv));
        pd = make_dict(pv, isCalibrated);
        if j == 1
            d = Dict([key => pd]);
        else
            push!(d, key => pd);
        end
    end

    return d
end


## -------------  Setting values


"""
	$(SIGNATURES)

Set model values from `Dict{String, Dict}` generated by `make_dict`.
"""
function set_values_from_dicts!(x :: ModelObject,  pvDict :: Dict; isCalibrated :: Bool = true)

    # Collect all model objects
    mObjV = collect_model_objects(x);

    # Loop over `ParamVector`s, represented as Dicts
    # `nameStr` is the `ObjectId` converted into a `String`
    # `pd` is the `ParamVector` converted into a `Dict`
    for (nameStr,  pd) in pvDict
        # Make string into ObjectId
        oId = make_object_id(nameStr);
        # Find the matching model object
        obj = find_object(x, oId);
        if !isnothing(obj)
            set_values_from_dict!(obj.pvec, pd);
            set_values_from_pvec!(obj, isCalibrated);
        end
    end
    return nothing
end


"""
	$(SIGNATURES)

Change value of a field in a `ModelObject` and its `ParamVector`.
"""
function change_value!(x :: ModelObject, oName :: Symbol, pName :: Symbol,  newValue)
    objV = find_object(x, oName);
    @assert length(objV) == 1  "Found $(length(objV)) matches for $oName / $pName"
    pvec = get_pvector(objV[1]);
    @assert length(pvec) > 0  "No ParamVector in $oName / $pName"
    oldValue = change_value!(pvec, pName, newValue);
    # Set value in object as well
    setfield!(objV[1], pName, newValue);
    return oldValue
end


## Set fields in struct from param vector (using values, not defaults)
function set_values_from_pvec!(x :: ModelObject, isCalibrated :: Bool)
    pvec = get_pvector(x);
    d = make_dict(pvec, isCalibrated, true);
    set_values_from_dict!(x, d);
    return nothing
end


## Set default values from param vector
#Typically for non-calibrated parameters
function set_default_values!(x :: ModelObject, isCalibrated :: Bool)
    pvec = get_pvector(x);
    # Last arg: use default values
    d = make_dict(pvec, isCalibrated, false);
    set_values_from_dict!(x, d);
    return nothing
end


"""
	$(SIGNATURES)


Set fields in a struct from a Dict{Symbol, Any}.
Does not change `ParamVector` inside `x` (if any).
Does not change child objects.
"""
function set_values_from_dict!(x :: ModelObject,  d :: Dict{Symbol, Any})
    for (k, val) in d
        if k âˆˆ propertynames(x)
            setfield!(x, k, val);
        else
            @warn "Field $k not found"
        end
    end
    return nothing
end


"""
	$(SIGNATURES)

Copy all values from a vector of `ParamVector` into an object, including child objects.
Only changes values that are `isCalibrated` in object and `v`.
"""
function set_values_from_pvectors!(x :: ModelObject, v :: Vector{ParamVector}, isCalibrated :: Bool)
    # Collect all model objects
    mObjV = collect_model_objects(x);

    # Loop over `ParamVector`s
    for pvec in v
        # Find the matching model object
        obj = find_object(x, pvec.objId);
        # show(obj)
        if !isnothing(obj)
            set_values_from_pvec!(obj.pvec, pvec, isCalibrated);
            set_values_from_pvec!(obj, isCalibrated);
            # println("Found object")
            # show(pvec.pv[1])
            # show(obj)
        end
    end
    return nothing
end



"""
    $(SIGNATURES)

Sync all values from object's param vector into object.
"""
function sync_values!(x :: ModelObject)
    set_values_from_pvec!(x, true);
    set_default_values!(x, false);
end


"""
    $(SIGNATURES)

Copy values from vector into param vector and object.
Calibrated parameters.
Uses the first `nUsed` values in `vAll`.
Order in `vAll` must match order in `pvec`. E.g., because `vAll` is generated by `make_vector`.
"""
function sync_from_vector!(x :: ModelObject, vAll :: Vector{ValueType})
    pvec = get_pvector(x);
    d11, nUsed1 = vector_to_dict(pvec, vAll, true);
    set_values_from_dict!(pvec, d11);
    set_values_from_pvec!(x, true);
    return nUsed1
end


"""
    $(SIGNATURES)

Copy values from a *vector* of `ParamVector` into a *vector* of `ModelObject`s.
The order of the objects must match the order of the `ParamVector`s.
The order of the values in `vAllInV` must match the order of `ParamVector`s.

OUT: 
    vAll: remaining values of vAllInV
"""
function sync_from_vector!(xV :: Vector, vAllInV :: Vector{ValueType})
    vAll = copy(vAllInV);
    for i1 = 1 : length(xV)
        # check that ParamVector matches model object
        # @assert check_match(pvecV[i1], xV[i1].objId);
        nUsed = sync_from_vector!(xV[i1], vAll);
        deleteat!(vAll, 1 : nUsed);
    end
    # Last object: everything should be used up
    # @assert isempty(vAll)  "Not all vector elements used"

    return vAll
end

# --------------